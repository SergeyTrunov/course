Неделя 2. Функции
http://heller.ru/course/viewtopic.php?f=7&t=24#p367

Задание 2.1. Напишите функцию input_int(a, b), которая будет работать 
так же как функция input() без параметров, но только она будет проверять, 
что введённая пользователем строка действительно является числом в интервале [a;b], 
и если это не так, то будет просить пользователя повторить попытку ввода.

Задание 2.2. Простым числом называется число, которое не делится ни на какое другое 
число кроме себя самого. Это числа 2, 3, 5, 7, 11, 13, 17 и так далее 
(1 простым не считается из соображений удобности). Простые числа интересны тем, 
что любое число может быть представлено как произведение 
простых чисел: 50 = 2*5*5, 70 = 7*2*5. Если числа представлены в виде разложения 
на простые множители, то их очень просто делить либо определять, что числа друг 
на друга не делятся. Так, 70 не делится на 50, потому что у 70-ти есть множитель 7, 
которого нет у 50-ти. Зато Очень легко поделить 50 на 2: достаточно вычеркнуть двойку 
из сомножителей: 50/2 = 5*5. Напишите функцию maximum_prime(n), которая принимает 
на вход какое-то натуральное число, а возвращает в качестве результата его наибольший 
простой множитель:
maximum_prime(70) == 7
maximum_prime(50) == 5
maximum_prime(4294967297) = 6700417

Задание 2.3. По аналогии с тем, как я поступил с факториалом, сделайте вывод каждого 
шага вычисления функции fibo на экран, чтобы понять что реально тут происходит 
и почему функция работает медленно.

def fibo(n):
  if n == 0: return 0
  if n == 1: return 1
  return fibo(n - 1) + fibo(n - 2)

Задание 2.4. Напишите функцию fibo так, чтобы она вычислялась эффективно, то есть без рекурсии.

import time

def compare_functions(f, g, arg):
  i = 0
  t1 = 0
  t2 = 0
  while i < 1000:
    last_time = time.clock()
    f(arg)
    t1 += time.clock() - last_time
    last_time = time.clock()
    g(arg)
    t2 += time.clock() - last_time
    i += 1
  print(t2 / t1)

# допустим fibo1 и fibo2 - это две функции
# вычисляющие значения чисел Фибоначчи,
# но разными методами
compare_functions(fibo1, fibo2, 50)
# после этого вызова на экран будет выведено
# во сколько раз вторая функция работает быстрее
# или медленнее первой

когда напишите свою реализацию fibo, используйте её для сравнения скорости 
вычисления моей и вашей функции


