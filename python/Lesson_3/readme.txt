Неделя 3. Перечисляемые объекты
http://heller.ru/course/viewtopic.php?f=7&t=30

Сегодняшняя наша тема - это перечислимые объекты в Python. Самые базовые примеры перечислимых 
объектов: списки (list), наборы, они же кортежи (tuple), диапазоны (range), строки (string), 
словари (dict), множества (set), файлы. В скобках я указал название типа в Python 3. 
Для файлов скобки остались пусты, потому что там с типом файлов всё не так просто 
(в Python 2 был тип file, который удалили из языка в новой версии).

Все эти вещи вы должны изучить самостоятельно. Я могу предложить несколько мест откуда начать:
http://en.wikibooks.org/wiki/Python_Pro ... /Sequences
http://juster.fvds.ru/learnwithpython/ru2e/ch08.html
http://ru.wikisource.org/wiki/Погружение_в_Python_3_(Пилгрим)/Встроенные_типы_данных

Задание 3.1. Если x - строка, то используя x.isdigit() вы можете проверить 
содержит ли x только цифры. Напишите функцию is_number(x), которая будет проверять, 
является ли записанная в x строка произвольным числом:

is_number("-234.12") == True
is_number("asdf") == False


Задание 3.2. Найдите описание решета Эратосфена и реализуйте этот алгоритм. 
Вы должны написать функцию sieve(n), которая возвращает список всех простых чисел вплоть до n. 
(Если бы функцию maximum_prime из прошлой недели пришлось бы звать для целого набора чисел, 
то было бы куда эффективнее вначале получить список всех простых чисел используя 
решето Эратосфена, а затем уже искать делители среди известных простых чисел). 
Обратите внимание, что в Википедии приведена реализация на Питоне якобы решета Эратосфена. 
На самом деле приведённый там код - это не решето Эратосфена, а его подобие, 
которое работает на порядок хуже оригинального алгоритма. 
(Задание со звёздочкой - объясните чем хуже алгоритм из Википедии).

Алгоритм(из вики):
"Для нахождения всех простых чисел не больше заданного числа n, 
следуя методу Эратосфена, нужно выполнить следующие шаги:

Выписать подряд все целые числа от двух до n (2, 3, 4, …, n).
Пусть переменная p изначально равна двум — первому простому числу.
Зачеркнуть в списке числа от 2p до n считая шагами по p (это будут числа кратные p: 2p, 3p, 4p, …).
Найти первое незачеркнутое число в списке, большее чем p, и присвоить значению переменной p это число.
Повторять шаги 3 и 4, пока возможно.
Теперь все незачеркнутые числа в списке — это все простые числа от 2 до n.

На практике, алгоритм можно улучшить следующим образом. 
На шаге № 3 числа можно зачеркивать начиная сразу с числа p2, потому что все составные 
числа меньше него уже будут зачеркнуты к этому времени. И, соответственно, останавливать 
алгоритм можно, когда p2 станет больше, чем n в степени 2.
Также, все p большие чем 2 — нечётные числа, и поэтому для них можно считать шагами по 2p, начиная с p2.


http://www.cleverstudents.ru/divisibility/prime_and_composite_numbers.html
https://ru.wikipedia.org/wiki/Решето_Эратосфена

http://mathematics.org.ru/wiki/Простые_и_составные_числа
Решето Эратосфена — алгоритм поиска простых чисел.
Сначала в ряду натуральных чисел вычёркиваются все чётные числа, кроме самого числа 2. 
Первое не вычеркнутое число — 3. Вычёркиваются все не вычеркнутые ранее числа, кратные 3, 
кроме числа 3. Первое не вычеркнутое число теперь — 5. И т.д. 
В результате в ряду останутся только простые числа.
"Легко заметить, что числа во втором,
  третьем, четвёртом и шестом слолбцах
  имеют вид 6n+2; 6n+3 и 6n+4
  соответственно, где n \in \mathcal{Z}.
  Следовательно, начиная со второй
  строки простые числа расположены
  только в первом и в пятом столбцах. Это
  замечание несколько упрощает вычёркивание."
Можно ли это использовать при составлении первоначальной таблицы?

# решил что профита не дает

# Самый очевидный момент — что для того, чтобы найти все простые до n, 
# достаточно выполнить просеивание только простыми, не превосходящими корня из n.


Задание 3.3. Пусть номер телефона - это просто семизначное число, 
а имя - это случайная строка символов английского алфавита, 
имеющая какую-то случайную длину от 4 до 10 символов. 
Сгенерируйте случайную "телефонную книгу", состоящую из 100000 телефонов 
и запишите её в файл (убедитесь, что у вас действительно 100000 разных телефонов). 
Придумайте сами в каком формате должны храниться данные в этом файле. 
Замечание: работа с файлами всегда занимает дольше времени, чем работа с оперативной памятью, 
то есть операции со словарями, списками и т.п. работают в тысячи раз быстрее, 
чем простейшие операции по записи или чтению файлов.






