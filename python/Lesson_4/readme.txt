Урок 4. Классы и объекты
http://heller.ru/course/viewtopic.php?f=7&t=43

Объект в программировании - это какой-то набор данных вместе с методами работы с ними. 
Фактически всё, с чем мы работали в Питоне до сих пор - это объекты. 
Методы - это функции, которые "привязаны" к конкретным объектам.

Первым примером я напишу игрушечный класс Logger, который мы будем использовать для того, 
чтобы записывать сообщения об ошибках в файл. Использовать этот класс мы будем так:

#log = Logger() # создаём логгер
#log.setLogLevel(3) # логируем все сообщения 
#log.write("Логгер работает!", 3) # пишем сообщение в лог-файл

import time

class Logger:
    def __init__(self):
        self.file = open("error.log", "a")
        self.level = 1
        self.messages = []

    def write(self, string, level):
        if level > self.level: return
        message = str(time.ctime())
        message += ": "
        message += string
        message += "\n"
        self.file.write(message)
        self.file.flush()
        self.messages.append(message)

    def setLogLevel(self, level):
        self.level = level

    def __getitem__(self, index):
        return self.messages[-index]

    def __len__(self):
        return len(self.messages)


Методы, обрамлённые двумя подчёркиваниями в начале и в конце имеют особый смысл. 
Полный список таких методов вы можете увидеть 
в документации: https://docs.python.org/3/reference/datamodel.html 
(большинство операторов вам там не понадобится и не стоит о них читать; 
в Интернете полно таблиц, которые описывают эти функции более кратко и удобно, например:
http://www.programiz.com/python-programming/operator-overloading


Когда говорят об ООП, обычно упоминают три принципа, которыми мы и закончим этот урок:

1. Инкапсуляция: объединение связанных данных и методов работы с ними в один объект, 
сокрытие от пользователя объекта не важных для него деталей этого объекта (например, 
от вас как от пользователя файлами скрыто как именно они читаются и пишутся, 
всё что у вас есть - набор выданных вам автором класса методов работы с ними).
2. Наследование. Это мы рассмотрели уже.
3. Полиморфизм. Возможность работы с любыми объектами так, будто это просто объекты 
базового класса. Так, если m1 и m2 - какие-то монстры, мы всегда можем 
написать m1.attack(m2) и нам не важно что именно это за монстры - это просто будет работать, 
будь то фениксы, пожиратели смерти или дарты вейдеры. [отсылка к пирмеру с классами монстров, 
пример сюда не копировал]


